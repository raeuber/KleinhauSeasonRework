<?xml version="1.0" encoding="utf-8"?>

<CustomShader version="3">
    <Parameters>
        <Parameter name="alphaBlendStartEnd"    target="alphaBlendStartEnd" type="float3" defaultValue="70 75 0 0" />
        <Parameter name="frequencyAndScale"     target="frequencyAndScale"  type="float3" defaultValue="0.3 0.2 0 0" />
        <Parameter name="plantRotate"           target="plantRotate"        type="float4" defaultValue="0.4363 1.57 0.0 0.0" minValue = "-6.0 -6.0 0.0 0.0"        maxValue = "6.0 6.0 1.0 1.0"/>
        <Parameter name="cellSizeTerrainSizeScaleXZScaleY" target="cellSizeTerrainSizeScaleXZScaleY" type="float4"/>
    </Parameters>
    <Textures>
        <Texture name = "colorMask"         defaultColorProfile = "linearRGB" defaultFilename = "../maps/map01/grassFlowers_mask.png"/>
        <Texture name = "positionColorMask" defaultColorProfile = "sRGB" defaultFilename = "../maps/map01/grassFlowers_color.png"/>
    </Textures>
    <Variations>
        <Variation name = "PLANT_ROTATION">
<![CDATA[
/*
foliage model have to be oriented to +X
plantRotate.x - random  
                0.0   == 0 deg
                0.262 == 15 deg
                0.524 == 30 deg
                0.785 == 45 deg
                0.960 == 55 deg
                6.283 == 360 deg
plantRotate.y - rotation value, 
                0     == +X
                1.570 == -Z
                3.142 == -X
                4.712 == +Z
*/
    #define PLANT_ROTATION      
]]>
        </Variation>
        <Variation name = "COLOR_MASK">
<![CDATA[
    #define COLOR_MASK
]]>
        </Variation>
    </Variations>
    <LodLevel startDistance="0">
        <CodeInjections>
            <CodeInjection position="SHARED_START">
<![CDATA[
#if defined(SPECULAR)
#undef SPECULAR
#endif
#if (defined(AMBIENT) || defined(DIFFUSE) || defined(SPECULAR))
#define FOLIAGE_COLOR_OUTPUT
#endif
]]>
            </CodeInjection>
            <CodeInjection position = "SAMPLERS">
<![CDATA[
sampler2D colorMask;
sampler2D positionColorMask;
]]>
            </CodeInjection>
            <CodeInjection position="CONFIG_DEFINES">
<![CDATA[
#if GPU_PROFILE <= GPU_PROFILE_HIGH
    #define NUM_SHADOW_MAP_SAMPLES 1
#endif
]]>
            </CodeInjection>
            <CodeInjection position="GET_NORMAL_VS">
<![CDATA[
#ifdef FOLIAGE_COLOR_OUTPUT
    float3 normal = float3(In.position.w, In.texCoords0.zw); // get mesh normal
    float  mRotation = In.blendWeights.w*3.1415926;
    #if defined( PLANT_ROTATION )
        if (getDefaultTexCoords(In).x > 1) {
            float mRand = lerp( -plantRotate.x, plantRotate.x, In.blendWeights.w );
            mRotation = mRand + plantRotate.y;
        }
    #endif
    return rotateVectorToTerrainNormal(In, rotateFoliageVector( In, normal, mRotation ), In.texCoords1.xyz - 0.5);
#endif
]]>
            </CodeInjection>
            <CodeInjection position="GET_DEFAULT_TEXCOORDS_VS">
<![CDATA[
return getFoliageTexCoords(In);
]]>
            </CodeInjection>
            <CodeInjection position="MATERIALINFO">
<![CDATA[
uniform float4 alphaBlendStartEnd;
uniform float4 frequencyAndScale;
uniform float4 cellSizeTerrainSizeScaleXZScaleY;
#if defined( PLANT_ROTATION )
    uniform float4 plantRotate;
#endif
]]>
            </CodeInjection>
            <CodeInjection position="GET_POSITION_VS">
<![CDATA[
float3 position1 = In.position.xyz * float3(16.0, 16.0, 16.0);  // get mesh XYZ
position1 *= In.color.xyx * 8;  // scale by widthScale & heightScale
float windScale = position1.y;
float3 position = rotateFoliageVector(In, position1, In.blendWeights.w*3.1415926);
#if defined( PLANT_ROTATION )
    if (getDefaultTexCoords(In).x > 1) {
        float mRand = lerp( -plantRotate.x, plantRotate.x, In.blendWeights.w );
        position = rotateFoliageVector(In, position1, mRand + plantRotate.y);
     }
#endif

float3 blockPos = In.blendWeights.xyz;
blockPos.xz = blockPos.xz*cellSizeTerrainSizeScaleXZScaleY.x;
blockPos.y = (blockPos.y+0.5) * cellSizeTerrainSizeScaleXZScaleY.w;

position += blockPos;   // add blockPositionX,Y,Z
float directionX = sin(blockPos.x+blockPos.z);
float3 direction = normalize(float3(directionX,0,1-directionX));

float2 mFreqScale = frequencyAndScale.xy;
float mSpeed = 1.0;

mFreqScale.y *= 0.25;
mSpeed *= 0.25;
float offset1 = sin( mSpeed*cTime_s + blockPos.x*blockPos.z * mFreqScale.x)*windScale*mFreqScale.y;

mFreqScale.y *= 8.0;
mSpeed *= 10.0;
float offset2 = sin( mSpeed*cTime_s + blockPos.x*blockPos.z * mFreqScale.x)*windScale*mFreqScale.y;

float offset = lerp( offset1, offset2, cShared0 );

return position.xyz + direction * offset;
]]>
            </CodeInjection>
            <CodeInjection position="VS_OUTPUT">
<![CDATA[
float alphaScale : TEXCOORDn;
#if defined(COLOR_MASK)
    float2  albedoMapTexCoordsY : TEXCOORDn;
#endif
]]>
            </CodeInjection>
           <CodeInjection position="POST_SET_TEXCOORDS_VS">
<![CDATA[
#if defined(COLOR_MASK)
    float3 fullWorldPosition = worldPosition + float3(invViewMatrix[0][3], invViewMatrix[1][3], invViewMatrix[2][3]);
    float2 yPos = fullWorldPosition.xz;
    yPos.y = 1 - yPos.y;
    yPos /= (cellSizeTerrainSizeScaleXZScaleY.y*cellSizeTerrainSizeScaleXZScaleY.z);
    yPos += float2(0.5,0.5);
    Out.albedoMapTexCoordsY = yPos;
#endif
]]>
            </CodeInjection>
            <CodeInjection position="VS_END">
<![CDATA[
//Out.alphaScale = 1 + saturate((length(viewDir)-alphaBlendStartEnd.x)/(alphaBlendStartEnd.y-alphaBlendStartEnd.x))*alphaBlendStartEnd.z;
Out.alphaScale = 1.0 - saturate((length(viewDir)-(alphaBlendStartEnd.x))/(alphaBlendStartEnd.y-alphaBlendStartEnd.x));
//Out.alphaScale = 1.0 - saturate((length(viewDir)-60)/(80-60));
]]>
            </CodeInjection>
            <CodeInjection position="POST_ALBEDO_FS">
<![CDATA[
#if defined(ALBEDO_MAP)
    #if defined(COLOR_MASK)
        float3 mColorMask = tex2D( colorMask,    In.vs.ALBEDOMAP_TEXCOORD  ).xyz;
        float3 mTexY      = tex2D( positionColorMask, In.vs.albedoMapTexCoordsY ).xyz;
        albedo.rgb        = lerp( albedo.rgb, mTexY, mColorMask.r );
    #endif
#endif
albedo.w *= In.vs.alphaScale;
]]>
            </CodeInjection>
        </CodeInjections>
    </LodLevel>
</CustomShader>
